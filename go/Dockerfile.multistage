# import golang base image
FROM golang:1.19 AS build-stage

# 设置工作目录,使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），
# 以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。
WORKDIR /app

# 将项目 modules files 复制进image中 /app/go.mod /app/go.sum
COPY go.mod go.sum ./

# 引入程序源码
COPY *.go ./

# RUN 执行命令，下载项目引用的依赖
RUN go mod download

# 上一步完成了工具链：编译、链接...，开始编译构建程序的二进制可执行文件
RUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping

# CMD tell Docker what command to execute when our image is used to start a container.
# images 加载进 container 时需要执行的操作
CMD ["/docker-ps-ping"]


# 在容器中运行测试用例，Run the tests in the container
FROM build-stage AS run-test-stage
RUN go test -v ./...

# 创建一个新镜像，只执行二进制程序，，Deploy the application binary into a lean image
FROM gcr.io/distroless/base-debian11 AS build-release-stage

WORKDIR /

COPY --from=build-stage /docker-gs-ping /docker-gs-ping

EXPOSE 8080

USER nonroot:nonroot

ENTRYPOINT ["/docker-gs-ping"]